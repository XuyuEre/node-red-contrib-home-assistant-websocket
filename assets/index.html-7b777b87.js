import{_ as i,r as a,o as d,c as h,a as e,b as t,d as o,w as s}from"./app-fb8aa0f7.js";const r={},c=e("h1",{id:"nodes",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#nodes","aria-hidden":"true"},"#"),t(" Nodes")],-1),l={id:"api",tabindex:"-1"},_=e("a",{class:"header-anchor",href:"#api","aria-hidden":"true"},"#",-1),u=e("p",null,"Access all points of the WebSocket and HTTP API.",-1),f={id:"binary-sensor",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#binary-sensor","aria-hidden":"true"},"#",-1),p=e("p",null,"Creates a binary sensor entity in Home Assistant that is controlled from with Node-RED.",-1),g={id:"button",tabindex:"-1"},v=e("a",{class:"header-anchor",href:"#button","aria-hidden":"true"},"#",-1),b=e("p",null,"Creates a button in Home Assistant that triggers a flow in Node-RED",-1),y={id:"call-service",tabindex:"-1"},x=e("a",{class:"header-anchor",href:"#call-service","aria-hidden":"true"},"#",-1),w=e("p",null,[t("Sends a request to home assistant for any domain and service available ( "),e("code",null,"light/turn_on"),t(", "),e("code",null,"input_select/select_option"),t(", etc..)")],-1),A={id:"current-state",tabindex:"-1"},C=e("a",{class:"header-anchor",href:"#current-state","aria-hidden":"true"},"#",-1),H=e("p",null,"Fetches the last known state for any entity on input",-1),k={id:"device",tabindex:"-1"},E=e("a",{class:"header-anchor",href:"#device","aria-hidden":"true"},"#",-1),S=e("p",null,"Creates device automations and calls device actions",-1),N={id:"device-config",tabindex:"-1"},R=e("a",{class:"header-anchor",href:"#device-config","aria-hidden":"true"},"#",-1),T=e("p",null,"Configuration node for devices added to Home Assistant",-1),D={id:"entity",tabindex:"-1"},B=e("a",{class:"header-anchor",href:"#entity","aria-hidden":"true"},"#",-1),P=e("p",null,"Creates an entity in Home Assistant which can be manipulated from this node",-1),z={id:"entity-config",tabindex:"-1"},F=e("a",{class:"header-anchor",href:"#entity-config","aria-hidden":"true"},"#",-1),L=e("p",null,"Configuration node for the different entity type nodes",-1),O={id:"events-all",tabindex:"-1"},W=e("a",{class:"header-anchor",href:"#events-all","aria-hidden":"true"},"#",-1),G=e("p",null,"Listens for all types of events from home assistant with the ability to filter by event type",-1),I={id:"events-state",tabindex:"-1"},V=e("a",{class:"header-anchor",href:"#events-state","aria-hidden":"true"},"#",-1),U=e("p",null,[t("Listens for only "),e("code",null,"state_changed"),t(" events from home assistant")],-1),q={id:"fire-event",tabindex:"-1"},M=e("a",{class:"header-anchor",href:"#fire-event","aria-hidden":"true"},"#",-1),Z=e("p",null,"Fire an event on the event bus",-1),j={id:"get-entities",tabindex:"-1"},J=e("a",{class:"header-anchor",href:"#get-entities","aria-hidden":"true"},"#",-1),K=e("p",null,"Get entities based on search criteria with 3 different output options",-1),Q={id:"get-history",tabindex:"-1"},X=e("a",{class:"header-anchor",href:"#get-history","aria-hidden":"true"},"#",-1),Y=e("p",null,"Fetches HomeAssistant history on input",-1),$={id:"poll-state",tabindex:"-1"},ee=e("a",{class:"header-anchor",href:"#poll-state","aria-hidden":"true"},"#",-1),te=e("p",null,"Outputs the state of an entity at regular intervals, optionally also at startup and every time the entity changes if desired",-1),ne={id:"render-template",tabindex:"-1"},oe=e("a",{class:"header-anchor",href:"#render-template","aria-hidden":"true"},"#",-1),se=e("p",null,"Allows rendering of templates on input",-1),ie={id:"sensor",tabindex:"-1"},ae=e("a",{class:"header-anchor",href:"#sensor","aria-hidden":"true"},"#",-1),de=e("p",null,"Creates a sensor entity in Home Assistant that is controlled from with Node-RED.",-1),he={id:"server-config",tabindex:"-1"},re=e("a",{class:"header-anchor",href:"#server-config","aria-hidden":"true"},"#",-1),ce=e("p",null,"Home Assistant connection configuration",-1),le={id:"switch",tabindex:"-1"},_e=e("a",{class:"header-anchor",href:"#switch","aria-hidden":"true"},"#",-1),ue=e("p",null,"Creates a switch entity in Home Assistant that is controlled from with Node-RED. Also allows a flow to be started from a service call.",-1),fe={id:"tag",tabindex:"-1"},me=e("a",{class:"header-anchor",href:"#tag","aria-hidden":"true"},"#",-1),pe=e("p",null,"Outputs when Home Assistant receives a tag scanned event for a configured tag id",-1),ge={id:"time",tabindex:"-1"},ve=e("a",{class:"header-anchor",href:"#time","aria-hidden":"true"},"#",-1),be=e("p",null,"A node that can be scheduled to trigger at a future date and time from a Home Assistant entity",-1),ye={id:"trigger-state",tabindex:"-1"},xe=e("a",{class:"header-anchor",href:"#trigger-state","aria-hidden":"true"},"#",-1),we=e("p",null,[t("Much like the "),e("code",null,"State Changed Node"),t(" however, provides some advanced functionality around common automation use cases")],-1),Ae={id:"update-config",tabindex:"-1"},Ce=e("a",{class:"header-anchor",href:"#update-config","aria-hidden":"true"},"#",-1),He=e("p",null,"Allows updating of entities configuration in Home Assistant",-1),ke={id:"wait-until",tabindex:"-1"},Ee=e("a",{class:"header-anchor",href:"#wait-until","aria-hidden":"true"},"#",-1),Se=e("p",null,"When an input is received the node will wait until the condition is met or the timeout occurs then will pass on the last received message",-1),Ne={id:"webhook",tabindex:"-1"},Re=e("a",{class:"header-anchor",href:"#webhook","aria-hidden":"true"},"#",-1),Te=e("p",null,"Outputs the data received from the created webhook in Home Assistant",-1),De={id:"zone",tabindex:"-1"},Be=e("a",{class:"header-anchor",href:"#zone","aria-hidden":"true"},"#",-1),Pe=e("p",null,"Outputs when one of the configured entities enter or leaves one of the defined zones",-1);function ze(Fe,Le){const n=a("RouterLink");return d(),h("div",null,[c,e("h2",l,[_,t(),o(n,{to:"/node/API.html"},{default:s(()=>[t("API")]),_:1})]),u,e("h2",f,[m,t(),o(n,{to:"/node/binary-sensor.html"},{default:s(()=>[t("Binary Sensor")]),_:1})]),p,e("h2",g,[v,t(),o(n,{to:"/node/button.html"},{default:s(()=>[t("Button")]),_:1})]),b,e("h2",y,[x,t(),o(n,{to:"/node/call-service.html"},{default:s(()=>[t("Call Service")]),_:1})]),w,e("h2",A,[C,t(),o(n,{to:"/node/current-state.html"},{default:s(()=>[t("Current State")]),_:1})]),H,e("h2",k,[E,t(),o(n,{to:"/node/device.html"},{default:s(()=>[t("Device")]),_:1})]),S,e("h2",N,[R,t(),o(n,{to:"/node/device-config.html"},{default:s(()=>[t("Device Config")]),_:1})]),T,e("h2",D,[B,t(),o(n,{to:"/node/entity.html"},{default:s(()=>[t("Entity")]),_:1})]),P,e("h2",z,[F,t(),o(n,{to:"/node/entity-config.html"},{default:s(()=>[t("Entity Config")]),_:1})]),L,e("h2",O,[W,t(),o(n,{to:"/node/events-all.html"},{default:s(()=>[t("Events: all")]),_:1})]),G,e("h2",I,[V,t(),o(n,{to:"/node/events-state.html"},{default:s(()=>[t("Events: state")]),_:1})]),U,e("h2",q,[M,t(),o(n,{to:"/node/fire-event.html"},{default:s(()=>[t("Fire Event")]),_:1})]),Z,e("h2",j,[J,t(),o(n,{to:"/node/get-entities.html"},{default:s(()=>[t("Get Entities")]),_:1})]),K,e("h2",Q,[X,t(),o(n,{to:"/node/get-history.html"},{default:s(()=>[t("Get History")]),_:1})]),Y,e("h2",$,[ee,t(),o(n,{to:"/node/poll-state.html"},{default:s(()=>[t("Poll State")]),_:1})]),te,e("h2",ne,[oe,t(),o(n,{to:"/node/render-template.html"},{default:s(()=>[t("Render Template")]),_:1})]),se,e("h2",ie,[ae,t(),o(n,{to:"/node/sensor.html"},{default:s(()=>[t("Sensor")]),_:1})]),de,e("h2",he,[re,t(),o(n,{to:"/node/config-server.html"},{default:s(()=>[t("Server Config")]),_:1})]),ce,e("h2",le,[_e,t(),o(n,{to:"/node/switch.html"},{default:s(()=>[t("Switch")]),_:1})]),ue,e("h2",fe,[me,t(),o(n,{to:"/node/tag.html"},{default:s(()=>[t("Tag")]),_:1})]),pe,e("h2",ge,[ve,t(),o(n,{to:"/node/time.html"},{default:s(()=>[t("Time")]),_:1})]),be,e("h2",ye,[xe,t(),o(n,{to:"/node/trigger-state.html"},{default:s(()=>[t("Trigger: state")]),_:1})]),we,e("h2",Ae,[Ce,t(),o(n,{to:"/node/update-config.html"},{default:s(()=>[t("Update Config")]),_:1})]),He,e("h2",ke,[Ee,t(),o(n,{to:"/node/wait-until.html"},{default:s(()=>[t("Wait Until")]),_:1})]),Se,e("h2",Ne,[Re,t(),o(n,{to:"/node/webhook.html"},{default:s(()=>[t("Webhook")]),_:1})]),Te,e("h2",De,[Be,t(),o(n,{to:"/node/zone.html"},{default:s(()=>[t("Zone")]),_:1})]),Pe])}const We=i(r,[["render",ze],["__file","index.html.vue"]]);export{We as default};
